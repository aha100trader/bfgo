// Code generated by protoc-gen-go.
// source: bfdatafeed.proto
// DO NOT EDIT!

/*
Package bfdatafeed is a generated protocol buffer package.

It is generated from these files:
	bfdatafeed.proto

It has these top-level messages:
	BfBarData
	BfGetTickReq
	BfGetBarReq
	BfDeleteTickReq
	BfDeleteBarReq
	BfDeleteContractReq
*/
package bfdatafeed

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bfgateway "github.com/sunwangme/bfgo/api/bfgateway"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Bar周期类型
type BfBarPeriod int32

const (
	BfBarPeriod_PERIOD_UNKNOWN BfBarPeriod = 0
	BfBarPeriod_PERIOD_M01     BfBarPeriod = 1
	BfBarPeriod_PERIOD_M03     BfBarPeriod = 2
	BfBarPeriod_PERIOD_M15     BfBarPeriod = 3
	BfBarPeriod_PERIOD_H01     BfBarPeriod = 4
	BfBarPeriod_PERIOD_D01     BfBarPeriod = 5
	BfBarPeriod_PERIOD_W01     BfBarPeriod = 6
)

var BfBarPeriod_name = map[int32]string{
	0: "PERIOD_UNKNOWN",
	1: "PERIOD_M01",
	2: "PERIOD_M03",
	3: "PERIOD_M15",
	4: "PERIOD_H01",
	5: "PERIOD_D01",
	6: "PERIOD_W01",
}
var BfBarPeriod_value = map[string]int32{
	"PERIOD_UNKNOWN": 0,
	"PERIOD_M01":     1,
	"PERIOD_M03":     2,
	"PERIOD_M15":     3,
	"PERIOD_H01":     4,
	"PERIOD_D01":     5,
	"PERIOD_W01":     6,
}

func (x BfBarPeriod) String() string {
	return proto.EnumName(BfBarPeriod_name, int32(x))
}
func (BfBarPeriod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Bar行情数据类
type BfBarData struct {
	// 代码相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	// 周期
	Period BfBarPeriod `protobuf:"varint,3,opt,name=period,enum=bfdatafeed.BfBarPeriod" json:"period,omitempty"`
	// 成交数据
	ActionDate   string  `protobuf:"bytes,4,opt,name=actionDate" json:"actionDate,omitempty"`
	BarTime      string  `protobuf:"bytes,5,opt,name=barTime" json:"barTime,omitempty"`
	Volume       int32   `protobuf:"varint,6,opt,name=volume" json:"volume,omitempty"`
	OpenInterest float64 `protobuf:"fixed64,7,opt,name=openInterest" json:"openInterest,omitempty"`
	LastVolume   int32   `protobuf:"varint,8,opt,name=lastVolume" json:"lastVolume,omitempty"`
	// OHLC
	OpenPrice  float64 `protobuf:"fixed64,9,opt,name=openPrice" json:"openPrice,omitempty"`
	HighPrice  float64 `protobuf:"fixed64,10,opt,name=highPrice" json:"highPrice,omitempty"`
	LowPrice   float64 `protobuf:"fixed64,11,opt,name=lowPrice" json:"lowPrice,omitempty"`
	ClosePrice float64 `protobuf:"fixed64,12,opt,name=closePrice" json:"closePrice,omitempty"`
}

func (m *BfBarData) Reset()                    { *m = BfBarData{} }
func (m *BfBarData) String() string            { return proto.CompactTextString(m) }
func (*BfBarData) ProtoMessage()               {}
func (*BfBarData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BfGetTickReq struct {
	// 代码编号相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	ToDate   string `protobuf:"bytes,3,opt,name=toDate" json:"toDate,omitempty"`
	ToTime   string `protobuf:"bytes,4,opt,name=toTime" json:"toTime,omitempty"`
	Count    int32  `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
}

func (m *BfGetTickReq) Reset()                    { *m = BfGetTickReq{} }
func (m *BfGetTickReq) String() string            { return proto.CompactTextString(m) }
func (*BfGetTickReq) ProtoMessage()               {}
func (*BfGetTickReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type BfGetBarReq struct {
	// 代码编号相关
	Symbol   string      `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string      `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	Period   BfBarPeriod `protobuf:"varint,3,opt,name=period,enum=bfdatafeed.BfBarPeriod" json:"period,omitempty"`
	ToDate   string      `protobuf:"bytes,4,opt,name=toDate" json:"toDate,omitempty"`
	ToTime   string      `protobuf:"bytes,5,opt,name=toTime" json:"toTime,omitempty"`
	Count    int32       `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
}

func (m *BfGetBarReq) Reset()                    { *m = BfGetBarReq{} }
func (m *BfGetBarReq) String() string            { return proto.CompactTextString(m) }
func (*BfGetBarReq) ProtoMessage()               {}
func (*BfGetBarReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type BfDeleteTickReq struct {
	// 代码编号相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	ToDate   string `protobuf:"bytes,3,opt,name=toDate" json:"toDate,omitempty"`
	ToTime   string `protobuf:"bytes,4,opt,name=toTime" json:"toTime,omitempty"`
	FromDate string `protobuf:"bytes,5,opt,name=fromDate" json:"fromDate,omitempty"`
	FromTime string `protobuf:"bytes,6,opt,name=fromTime" json:"fromTime,omitempty"`
}

func (m *BfDeleteTickReq) Reset()                    { *m = BfDeleteTickReq{} }
func (m *BfDeleteTickReq) String() string            { return proto.CompactTextString(m) }
func (*BfDeleteTickReq) ProtoMessage()               {}
func (*BfDeleteTickReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type BfDeleteBarReq struct {
	// 代码编号相关
	Symbol   string      `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string      `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	Period   BfBarPeriod `protobuf:"varint,3,opt,name=period,enum=bfdatafeed.BfBarPeriod" json:"period,omitempty"`
	ToDate   string      `protobuf:"bytes,4,opt,name=toDate" json:"toDate,omitempty"`
	ToTime   string      `protobuf:"bytes,5,opt,name=toTime" json:"toTime,omitempty"`
	FromDate string      `protobuf:"bytes,6,opt,name=fromDate" json:"fromDate,omitempty"`
	FromTime string      `protobuf:"bytes,7,opt,name=fromTime" json:"fromTime,omitempty"`
}

func (m *BfDeleteBarReq) Reset()                    { *m = BfDeleteBarReq{} }
func (m *BfDeleteBarReq) String() string            { return proto.CompactTextString(m) }
func (*BfDeleteBarReq) ProtoMessage()               {}
func (*BfDeleteBarReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type BfDeleteContractReq struct {
	// 代码编号相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
}

func (m *BfDeleteContractReq) Reset()                    { *m = BfDeleteContractReq{} }
func (m *BfDeleteContractReq) String() string            { return proto.CompactTextString(m) }
func (*BfDeleteContractReq) ProtoMessage()               {}
func (*BfDeleteContractReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*BfBarData)(nil), "bfdatafeed.BfBarData")
	proto.RegisterType((*BfGetTickReq)(nil), "bfdatafeed.BfGetTickReq")
	proto.RegisterType((*BfGetBarReq)(nil), "bfdatafeed.BfGetBarReq")
	proto.RegisterType((*BfDeleteTickReq)(nil), "bfdatafeed.BfDeleteTickReq")
	proto.RegisterType((*BfDeleteBarReq)(nil), "bfdatafeed.BfDeleteBarReq")
	proto.RegisterType((*BfDeleteContractReq)(nil), "bfdatafeed.BfDeleteContractReq")
	proto.RegisterEnum("bfdatafeed.BfBarPeriod", BfBarPeriod_name, BfBarPeriod_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for BfDatafeedService service

type BfDatafeedServiceClient interface {
	// 活跃检测
	Ping(ctx context.Context, in *bfgateway.BfPingData, opts ...grpc.CallOption) (*bfgateway.BfPingData, error)
	// 保存tick
	InsertTick(ctx context.Context, in *bfgateway.BfTickData, opts ...grpc.CallOption) (*bfgateway.BfVoid, error)
	// 保存bar
	InsertBar(ctx context.Context, in *BfBarData, opts ...grpc.CallOption) (*bfgateway.BfVoid, error)
	// 保存contract
	InsertContract(ctx context.Context, in *bfgateway.BfContractData, opts ...grpc.CallOption) (*bfgateway.BfVoid, error)
	// 获取tick
	GetTick(ctx context.Context, in *BfGetTickReq, opts ...grpc.CallOption) (BfDatafeedService_GetTickClient, error)
	// 获取bar
	GetBar(ctx context.Context, in *BfGetBarReq, opts ...grpc.CallOption) (BfDatafeedService_GetBarClient, error)
	// 获取contract, 支持* *获取全部订阅合约
	GetContract(ctx context.Context, in *bfgateway.BfGetContractReq, opts ...grpc.CallOption) (BfDatafeedService_GetContractClient, error)
	// 删除tick
	DeleteTick(ctx context.Context, in *BfDeleteTickReq, opts ...grpc.CallOption) (*bfgateway.BfVoid, error)
	// 删除bar
	DeleteBar(ctx context.Context, in *BfDeleteBarReq, opts ...grpc.CallOption) (*bfgateway.BfVoid, error)
	// 删除contract，支持* *删除全部合约
	DeleteContract(ctx context.Context, in *BfDeleteContractReq, opts ...grpc.CallOption) (*bfgateway.BfVoid, error)
	// 重置数据库
	CleanAll(ctx context.Context, in *bfgateway.BfVoid, opts ...grpc.CallOption) (*bfgateway.BfVoid, error)
}

type bfDatafeedServiceClient struct {
	cc *grpc.ClientConn
}

func NewBfDatafeedServiceClient(cc *grpc.ClientConn) BfDatafeedServiceClient {
	return &bfDatafeedServiceClient{cc}
}

func (c *bfDatafeedServiceClient) Ping(ctx context.Context, in *bfgateway.BfPingData, opts ...grpc.CallOption) (*bfgateway.BfPingData, error) {
	out := new(bfgateway.BfPingData)
	err := grpc.Invoke(ctx, "/bfdatafeed.BfDatafeedService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfDatafeedServiceClient) InsertTick(ctx context.Context, in *bfgateway.BfTickData, opts ...grpc.CallOption) (*bfgateway.BfVoid, error) {
	out := new(bfgateway.BfVoid)
	err := grpc.Invoke(ctx, "/bfdatafeed.BfDatafeedService/InsertTick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfDatafeedServiceClient) InsertBar(ctx context.Context, in *BfBarData, opts ...grpc.CallOption) (*bfgateway.BfVoid, error) {
	out := new(bfgateway.BfVoid)
	err := grpc.Invoke(ctx, "/bfdatafeed.BfDatafeedService/InsertBar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfDatafeedServiceClient) InsertContract(ctx context.Context, in *bfgateway.BfContractData, opts ...grpc.CallOption) (*bfgateway.BfVoid, error) {
	out := new(bfgateway.BfVoid)
	err := grpc.Invoke(ctx, "/bfdatafeed.BfDatafeedService/InsertContract", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfDatafeedServiceClient) GetTick(ctx context.Context, in *BfGetTickReq, opts ...grpc.CallOption) (BfDatafeedService_GetTickClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfDatafeedService_serviceDesc.Streams[0], c.cc, "/bfdatafeed.BfDatafeedService/GetTick", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfDatafeedServiceGetTickClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfDatafeedService_GetTickClient interface {
	Recv() (*bfgateway.BfTickData, error)
	grpc.ClientStream
}

type bfDatafeedServiceGetTickClient struct {
	grpc.ClientStream
}

func (x *bfDatafeedServiceGetTickClient) Recv() (*bfgateway.BfTickData, error) {
	m := new(bfgateway.BfTickData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfDatafeedServiceClient) GetBar(ctx context.Context, in *BfGetBarReq, opts ...grpc.CallOption) (BfDatafeedService_GetBarClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfDatafeedService_serviceDesc.Streams[1], c.cc, "/bfdatafeed.BfDatafeedService/GetBar", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfDatafeedServiceGetBarClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfDatafeedService_GetBarClient interface {
	Recv() (*BfBarData, error)
	grpc.ClientStream
}

type bfDatafeedServiceGetBarClient struct {
	grpc.ClientStream
}

func (x *bfDatafeedServiceGetBarClient) Recv() (*BfBarData, error) {
	m := new(BfBarData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfDatafeedServiceClient) GetContract(ctx context.Context, in *bfgateway.BfGetContractReq, opts ...grpc.CallOption) (BfDatafeedService_GetContractClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfDatafeedService_serviceDesc.Streams[2], c.cc, "/bfdatafeed.BfDatafeedService/GetContract", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfDatafeedServiceGetContractClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfDatafeedService_GetContractClient interface {
	Recv() (*bfgateway.BfContractData, error)
	grpc.ClientStream
}

type bfDatafeedServiceGetContractClient struct {
	grpc.ClientStream
}

func (x *bfDatafeedServiceGetContractClient) Recv() (*bfgateway.BfContractData, error) {
	m := new(bfgateway.BfContractData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfDatafeedServiceClient) DeleteTick(ctx context.Context, in *BfDeleteTickReq, opts ...grpc.CallOption) (*bfgateway.BfVoid, error) {
	out := new(bfgateway.BfVoid)
	err := grpc.Invoke(ctx, "/bfdatafeed.BfDatafeedService/DeleteTick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfDatafeedServiceClient) DeleteBar(ctx context.Context, in *BfDeleteBarReq, opts ...grpc.CallOption) (*bfgateway.BfVoid, error) {
	out := new(bfgateway.BfVoid)
	err := grpc.Invoke(ctx, "/bfdatafeed.BfDatafeedService/DeleteBar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfDatafeedServiceClient) DeleteContract(ctx context.Context, in *BfDeleteContractReq, opts ...grpc.CallOption) (*bfgateway.BfVoid, error) {
	out := new(bfgateway.BfVoid)
	err := grpc.Invoke(ctx, "/bfdatafeed.BfDatafeedService/DeleteContract", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfDatafeedServiceClient) CleanAll(ctx context.Context, in *bfgateway.BfVoid, opts ...grpc.CallOption) (*bfgateway.BfVoid, error) {
	out := new(bfgateway.BfVoid)
	err := grpc.Invoke(ctx, "/bfdatafeed.BfDatafeedService/CleanAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BfDatafeedService service

type BfDatafeedServiceServer interface {
	// 活跃检测
	Ping(context.Context, *bfgateway.BfPingData) (*bfgateway.BfPingData, error)
	// 保存tick
	InsertTick(context.Context, *bfgateway.BfTickData) (*bfgateway.BfVoid, error)
	// 保存bar
	InsertBar(context.Context, *BfBarData) (*bfgateway.BfVoid, error)
	// 保存contract
	InsertContract(context.Context, *bfgateway.BfContractData) (*bfgateway.BfVoid, error)
	// 获取tick
	GetTick(*BfGetTickReq, BfDatafeedService_GetTickServer) error
	// 获取bar
	GetBar(*BfGetBarReq, BfDatafeedService_GetBarServer) error
	// 获取contract, 支持* *获取全部订阅合约
	GetContract(*bfgateway.BfGetContractReq, BfDatafeedService_GetContractServer) error
	// 删除tick
	DeleteTick(context.Context, *BfDeleteTickReq) (*bfgateway.BfVoid, error)
	// 删除bar
	DeleteBar(context.Context, *BfDeleteBarReq) (*bfgateway.BfVoid, error)
	// 删除contract，支持* *删除全部合约
	DeleteContract(context.Context, *BfDeleteContractReq) (*bfgateway.BfVoid, error)
	// 重置数据库
	CleanAll(context.Context, *bfgateway.BfVoid) (*bfgateway.BfVoid, error)
}

func RegisterBfDatafeedServiceServer(s *grpc.Server, srv BfDatafeedServiceServer) {
	s.RegisterService(&_BfDatafeedService_serviceDesc, srv)
}

func _BfDatafeedService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bfgateway.BfPingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfDatafeedServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfdatafeed.BfDatafeedService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfDatafeedServiceServer).Ping(ctx, req.(*bfgateway.BfPingData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfDatafeedService_InsertTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bfgateway.BfTickData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfDatafeedServiceServer).InsertTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfdatafeed.BfDatafeedService/InsertTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfDatafeedServiceServer).InsertTick(ctx, req.(*bfgateway.BfTickData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfDatafeedService_InsertBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BfBarData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfDatafeedServiceServer).InsertBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfdatafeed.BfDatafeedService/InsertBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfDatafeedServiceServer).InsertBar(ctx, req.(*BfBarData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfDatafeedService_InsertContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bfgateway.BfContractData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfDatafeedServiceServer).InsertContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfdatafeed.BfDatafeedService/InsertContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfDatafeedServiceServer).InsertContract(ctx, req.(*bfgateway.BfContractData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfDatafeedService_GetTick_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BfGetTickReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfDatafeedServiceServer).GetTick(m, &bfDatafeedServiceGetTickServer{stream})
}

type BfDatafeedService_GetTickServer interface {
	Send(*bfgateway.BfTickData) error
	grpc.ServerStream
}

type bfDatafeedServiceGetTickServer struct {
	grpc.ServerStream
}

func (x *bfDatafeedServiceGetTickServer) Send(m *bfgateway.BfTickData) error {
	return x.ServerStream.SendMsg(m)
}

func _BfDatafeedService_GetBar_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BfGetBarReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfDatafeedServiceServer).GetBar(m, &bfDatafeedServiceGetBarServer{stream})
}

type BfDatafeedService_GetBarServer interface {
	Send(*BfBarData) error
	grpc.ServerStream
}

type bfDatafeedServiceGetBarServer struct {
	grpc.ServerStream
}

func (x *bfDatafeedServiceGetBarServer) Send(m *BfBarData) error {
	return x.ServerStream.SendMsg(m)
}

func _BfDatafeedService_GetContract_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(bfgateway.BfGetContractReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfDatafeedServiceServer).GetContract(m, &bfDatafeedServiceGetContractServer{stream})
}

type BfDatafeedService_GetContractServer interface {
	Send(*bfgateway.BfContractData) error
	grpc.ServerStream
}

type bfDatafeedServiceGetContractServer struct {
	grpc.ServerStream
}

func (x *bfDatafeedServiceGetContractServer) Send(m *bfgateway.BfContractData) error {
	return x.ServerStream.SendMsg(m)
}

func _BfDatafeedService_DeleteTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BfDeleteTickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfDatafeedServiceServer).DeleteTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfdatafeed.BfDatafeedService/DeleteTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfDatafeedServiceServer).DeleteTick(ctx, req.(*BfDeleteTickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfDatafeedService_DeleteBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BfDeleteBarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfDatafeedServiceServer).DeleteBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfdatafeed.BfDatafeedService/DeleteBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfDatafeedServiceServer).DeleteBar(ctx, req.(*BfDeleteBarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfDatafeedService_DeleteContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BfDeleteContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfDatafeedServiceServer).DeleteContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfdatafeed.BfDatafeedService/DeleteContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfDatafeedServiceServer).DeleteContract(ctx, req.(*BfDeleteContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfDatafeedService_CleanAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bfgateway.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfDatafeedServiceServer).CleanAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfdatafeed.BfDatafeedService/CleanAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfDatafeedServiceServer).CleanAll(ctx, req.(*bfgateway.BfVoid))
	}
	return interceptor(ctx, in, info, handler)
}

var _BfDatafeedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bfdatafeed.BfDatafeedService",
	HandlerType: (*BfDatafeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BfDatafeedService_Ping_Handler,
		},
		{
			MethodName: "InsertTick",
			Handler:    _BfDatafeedService_InsertTick_Handler,
		},
		{
			MethodName: "InsertBar",
			Handler:    _BfDatafeedService_InsertBar_Handler,
		},
		{
			MethodName: "InsertContract",
			Handler:    _BfDatafeedService_InsertContract_Handler,
		},
		{
			MethodName: "DeleteTick",
			Handler:    _BfDatafeedService_DeleteTick_Handler,
		},
		{
			MethodName: "DeleteBar",
			Handler:    _BfDatafeedService_DeleteBar_Handler,
		},
		{
			MethodName: "DeleteContract",
			Handler:    _BfDatafeedService_DeleteContract_Handler,
		},
		{
			MethodName: "CleanAll",
			Handler:    _BfDatafeedService_CleanAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTick",
			Handler:       _BfDatafeedService_GetTick_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBar",
			Handler:       _BfDatafeedService_GetBar_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetContract",
			Handler:       _BfDatafeedService_GetContract_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 703 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x56, 0x4b, 0x6f, 0xd3, 0x4c,
	0x14, 0xad, 0xdb, 0xd8, 0x69, 0x6e, 0xab, 0x34, 0x9d, 0xef, 0x83, 0x9a, 0x80, 0x00, 0x79, 0x55,
	0x75, 0x91, 0xf4, 0x21, 0x1e, 0x8b, 0xaa, 0x82, 0x34, 0x3c, 0x22, 0x44, 0x1b, 0x99, 0xd2, 0x4a,
	0x6c, 0x90, 0xe3, 0x8c, 0x13, 0x0b, 0xc7, 0x13, 0x9c, 0x49, 0x4b, 0x97, 0xec, 0xf8, 0x33, 0xec,
	0xd9, 0xf3, 0x3b, 0xf8, 0x2b, 0x88, 0x79, 0xf8, 0x31, 0x6e, 0x1d, 0x24, 0xb2, 0x40, 0x2c, 0xcf,
	0x39, 0xf7, 0xdc, 0xb9, 0xf7, 0x8e, 0xef, 0xc8, 0x50, 0xeb, 0x79, 0x7d, 0x87, 0x3a, 0x1e, 0xc6,
	0xfd, 0xc6, 0x38, 0x22, 0x94, 0x20, 0xc8, 0x98, 0xfa, 0x5a, 0xcf, 0x1b, 0x38, 0x14, 0x5f, 0x38,
	0x97, 0x52, 0xb4, 0x7e, 0x2e, 0x42, 0xa5, 0xe5, 0xb5, 0x9c, 0xa8, 0xcd, 0x42, 0xd0, 0x4d, 0x30,
	0x26, 0x97, 0xa3, 0x1e, 0x09, 0x4c, 0xed, 0xbe, 0xb6, 0x59, 0xb1, 0x63, 0x84, 0xea, 0xb0, 0x8c,
	0x3f, 0xb9, 0x43, 0x27, 0x1c, 0x60, 0x73, 0x51, 0x28, 0x29, 0x46, 0x4d, 0x30, 0xc6, 0x38, 0xf2,
	0x49, 0xdf, 0x5c, 0x62, 0x4a, 0x75, 0x77, 0xa3, 0xa1, 0x54, 0x20, 0x52, 0x77, 0x85, 0x6c, 0xc7,
	0x61, 0xe8, 0x2e, 0x80, 0xe3, 0x52, 0x9f, 0x84, 0xec, 0x48, 0x6c, 0x96, 0x44, 0x3a, 0x85, 0x41,
	0x26, 0x94, 0x7b, 0x4e, 0x74, 0xe2, 0x8f, 0xb0, 0xa9, 0x0b, 0x31, 0x81, 0xbc, 0xbc, 0x73, 0x12,
	0x4c, 0x99, 0x60, 0x30, 0x41, 0xb7, 0x63, 0x84, 0x2c, 0x58, 0x25, 0x63, 0x1c, 0x76, 0x42, 0x8a,
	0x23, 0x3c, 0xa1, 0x66, 0x99, 0xa9, 0x9a, 0x9d, 0xe3, 0xf8, 0xa9, 0x81, 0x33, 0xa1, 0xa7, 0xd2,
	0xbf, 0x2c, 0xfc, 0x0a, 0x83, 0xee, 0x40, 0x85, 0xc7, 0x77, 0x23, 0xdf, 0xc5, 0x66, 0x45, 0x24,
	0xc8, 0x08, 0xae, 0x0e, 0xfd, 0xc1, 0x50, 0xaa, 0x20, 0xd5, 0x94, 0xe0, 0xe3, 0x09, 0xc8, 0x85,
	0x14, 0x57, 0x84, 0x98, 0x62, 0x7e, 0xae, 0x1b, 0x90, 0x09, 0x96, 0xea, 0xaa, 0x50, 0x15, 0xc6,
	0xfa, 0xa2, 0xc1, 0x6a, 0xcb, 0x7b, 0x81, 0xe9, 0x89, 0xef, 0x7e, 0xb0, 0xf1, 0xc7, 0xb9, 0xee,
	0x80, 0x79, 0x28, 0x11, 0xe3, 0x5c, 0x92, 0x1e, 0x89, 0x24, 0x2f, 0x26, 0x59, 0x4a, 0x78, 0x31,
	0xc8, 0xff, 0x41, 0x77, 0xc9, 0x34, 0xa4, 0x62, 0xc0, 0xba, 0x2d, 0x81, 0xf5, 0x4d, 0x83, 0x15,
	0x51, 0x0a, 0xbb, 0xb3, 0x79, 0x2b, 0xf9, 0xe3, 0xaf, 0x21, 0x2b, 0xbd, 0x34, 0xa3, 0x74, 0xbd,
	0xb8, 0x74, 0x43, 0x2d, 0xfd, 0xab, 0x06, 0x6b, 0x2d, 0xaf, 0x8d, 0x03, 0x4c, 0xf1, 0xdf, 0x1c,
	0x24, 0xcb, 0xe5, 0x45, 0x64, 0x24, 0x1c, 0xb2, 0xce, 0x14, 0x27, 0x9a, 0x70, 0x19, 0x99, 0xc6,
	0xb1, 0xf5, 0x43, 0x83, 0x6a, 0x52, 0xef, 0xbf, 0x3c, 0x6d, 0xb5, 0x3f, 0xe3, 0x37, 0xfd, 0x95,
	0xaf, 0xf4, 0xd7, 0x81, 0xff, 0x92, 0xf6, 0x0e, 0x49, 0x48, 0x23, 0xb6, 0xde, 0x73, 0xf6, 0xb8,
	0xf5, 0x59, 0x7c, 0x95, 0x69, 0x2b, 0x08, 0x41, 0xb5, 0xfb, 0xcc, 0xee, 0x1c, 0xb7, 0xdf, 0xbf,
	0x3d, 0x7a, 0x75, 0x74, 0x7c, 0x76, 0x54, 0x5b, 0x40, 0x55, 0x80, 0x98, 0x7b, 0xbd, 0xbd, 0x53,
	0xd3, 0x72, 0x78, 0xaf, 0xb6, 0xa8, 0xe2, 0x9d, 0x07, 0xb5, 0x25, 0x05, 0xbf, 0x64, 0xf1, 0x25,
	0x05, 0xb7, 0x19, 0xd6, 0x15, 0x7c, 0xc6, 0xb0, 0xb1, 0xfb, 0x5d, 0x87, 0x75, 0xd6, 0x4f, 0x3c,
	0xd9, 0x37, 0x38, 0x3a, 0xe7, 0xab, 0xfd, 0x10, 0x4a, 0x5d, 0x3f, 0x1c, 0xa0, 0x1b, 0x8d, 0xec,
	0x55, 0x6d, 0x79, 0x9c, 0xe2, 0x91, 0xf5, 0x62, 0xda, 0x5a, 0x40, 0x8f, 0x01, 0x3a, 0xe1, 0x04,
	0x47, 0x62, 0xe5, 0xaf, 0xb8, 0x39, 0x25, 0xdc, 0xeb, 0x39, 0xfa, 0x94, 0xf8, 0x7d, 0xe6, 0x7c,
	0x04, 0x15, 0xe9, 0x64, 0xe3, 0x10, 0xc6, 0xfc, 0x65, 0xcf, 0x36, 0x3e, 0x81, 0xaa, 0x34, 0x26,
	0xb7, 0x81, 0x6e, 0xe5, 0xc2, 0x12, 0x7a, 0x76, 0x86, 0x03, 0x28, 0xc7, 0x8f, 0x14, 0x32, 0xf3,
	0x07, 0x67, 0x6f, 0x57, 0xbd, 0xb8, 0x17, 0x6b, 0x61, 0x5b, 0x43, 0xfb, 0x60, 0xc8, 0x97, 0x05,
	0x6d, 0x5c, 0xb3, 0xcb, 0x0d, 0xa8, 0x17, 0x37, 0x24, 0xdc, 0x1d, 0x58, 0x61, 0x71, 0x69, 0xf1,
	0xb7, 0x73, 0xe7, 0x28, 0x0a, 0x4f, 0x33, 0xbb, 0x33, 0x91, 0xea, 0x00, 0x20, 0x7b, 0x27, 0x44,
	0x26, 0xe5, 0xcc, 0xdc, 0x0b, 0x52, 0x3c, 0x88, 0x7d, 0xa8, 0xa4, 0x7b, 0x8b, 0xea, 0x45, 0xf6,
	0xb8, 0x9d, 0x42, 0xf7, 0x73, 0xa8, 0xe6, 0xd7, 0x02, 0xdd, 0x2b, 0x4a, 0xa1, 0xf6, 0x53, 0x98,
	0x67, 0x17, 0x96, 0x0f, 0x03, 0xec, 0x84, 0x4f, 0x83, 0x00, 0x5d, 0x0f, 0x28, 0xf4, 0xb4, 0xb6,
	0xde, 0x6d, 0x0e, 0x7c, 0x3a, 0x9c, 0xf6, 0x1a, 0x2e, 0x19, 0x35, 0x27, 0xd3, 0xf0, 0x82, 0x2d,
	0xd8, 0x08, 0x37, 0x59, 0x28, 0x69, 0x3a, 0x63, 0xbf, 0x99, 0x15, 0xd2, 0x33, 0xc4, 0xef, 0xc1,
	0xde, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0x25, 0x02, 0x6c, 0x4f, 0x08, 0x00, 0x00,
}
